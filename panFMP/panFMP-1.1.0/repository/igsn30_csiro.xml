<?xml version="1.0" encoding="ISO-8859-1"?>
<cfg:config xmlns:cfg="urn:java:de.pangaea.metadataportal.config.Config" xmlns:ib="urn:java:de.pangaea.metadataportal.harvester.IndexBuilder">
	<!-- Definition of the metadata schema and fileds for indexing: -->
	<cfg:metadata xmlns:igsn="http://schema.igsn.org/description/1.0" xmlns:date="http://exslt.org/dates-and-times" extension-element-prefixes="date">
		<!--
			Variables are evaluated at beginning of indexing process and can be used in all filters, fields, field-templates.
			The index builder also has some internal variables and functions in its namespace, that can be used:
			- $ib:index: the ID of the current index
			- $ib:indexDisplayName: the displayName of the current index
			- $ib:docIdentifier: the identifier of the harvested document
			- $ib:docDatestamp: the datestamp of the harvested document (if available), else ""
		-->
		<cfg:variables>
			<cfg:variable name="wkt">/igsn:resource/igsn:locations/igsn:geometry</cfg:variable>			
		
			<cfg:variable-template name="lng" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
				<xsl:choose>
					<xsl:when test="contains($wkt,'POINT')"> <xsl:value-of select="substring-before(substring-after($wkt,'('),' ')" /></xsl:when>
					<xsl:otherwise></xsl:otherwise>
				</xsl:choose>
			</cfg:variable-template>
			<cfg:variable-template name="lat" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
				<xsl:choose>
					<xsl:when test="contains($wkt,'POINT')"> <xsl:value-of select="substring-before(substring-after(substring-after($wkt,'('),' '),')')" /></xsl:when>
					<xsl:otherwise></xsl:otherwise>
				</xsl:choose>				
			</cfg:variable-template>			
		</cfg:variables>
		<!--
			Each harvested document goes through filter steps:
			The default is to accept all documents. You can give boolean XPath queries, that filter out documents.
			Interesting it the special function ib:isDocIdentifierUnique([index name,...]) to filter out duplicate identifiers!
		-->
		
		<!-- we want to remove all documents harvested into index 'pangaea-carboocean' that are from project 'JGOFS' -->
		<!-- we want to remove all documents with wrong namespace -->
		<!--
				We want to remove all duplicates; this is the simple approach: it checks if every harvested
				identifier is in no other currently existing index.
				Because of this every NEW document will stay in the index that was harvested first.
				You can create more complicated dependencies by using the $ib:index variable and also IDs
				as string parameters given to the ib:isDocIdentifierUnique() function.
			-->
		<!--cfg:filters default="accept">
			
			<cfg:deny>$ib:index='pangaea-carboocean' and /dif:DIF/dif:Project/dif:Short_Name[contains(.,'JGOFS')]</cfg:deny>
			
			<cfg:deny>namespace-uri(/*)!='http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/'</cfg:deny>
			
			<cfg:deny>not(ib:isDocIdentifierUnique())</cfg:deny>
		</cfg:filters-->
		
		<!--
			Field definitions:
			You can declare fields using <cfg:field> or <cfg:field-template> (for the latter see the example in variables-section).
			Each field has a name and some properties for Lucene:
			- lucenestorage: the field may be retrieved from query results (like a column in a database)
			- luceneindexed: the field is indexed and can be used in search strings or other querys
			- datatype: tokenizedText (standard fulltext indexing field, you can use it in query strings), string (the whole field content is indexed as string, but not tokenized),
			  number (numerical values, works with the TrieRangeQuery), dateTime (date/time values, works with the TrieRangeQuery),
			  xml (field is stored as XML in index, ideal for field templates), xhtml (only works with field-templates because it needs a XSL-template
			  that outputs XHTML. Can be used to generate thumbnail information for search results in HTML form).
			  The field template should not declare the XHTML namespace.
		-->
		<cfg:fields>
			<!--cfg:xml-field name="xml"/-->			
			<cfg:field name="title" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:title</cfg:field>
			<cfg:field name="identifier" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:identifier</cfg:field>
			<cfg:field name="identifierId" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">substring-after(/igsn:resource/igsn:identifier,'http://hdl.handle.net/10273/')</cfg:field>
			<cfg:field name="alternateidentifier" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:alternateIdentifiers/igsn:alternateIdentifier</cfg:field>
			<cfg:field name="material" datatype="string" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:materials/igsn:material</cfg:field>
			<cfg:field name="contributorIdentifier" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:contributors/igsn:contributor/igsn:identifier</cfg:field>
			<cfg:field name="contributorName" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:contributors/igsn:contributor/igsn:name</cfg:field>		
			<cfg:field name="resourceType" datatype="string" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:resourceTypes/igsn:resourceType</cfg:field>	
			<cfg:field name="longtitude" datatype="number" lucenestorage="true" luceneindexed="true">$lng</cfg:field>
			<cfg:field name="latitude" datatype="number" lucenestorage="true" luceneindexed="true">$lat</cfg:field>			
			<cfg:field name="wkt" datatype="string" lucenestorage="true" luceneindexed="true">$wkt</cfg:field>
			<cfg:field name="supplementalMetaData" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:supplementalMetadata/igsn:metadata/igsn:metadataTitle</cfg:field>			
			<cfg:field name="timestamp" datatype="dateTime" lucenestorage="true" luceneindexed="true">date:date-time()</cfg:field>
			<cfg:field name="description" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:description</cfg:field>
			<cfg:field name="relatedResource" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:relatedResources/igsn:relatedResource</cfg:field>			
			<cfg:field name="collector" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:collectors/igsn:collector/igsn:name</cfg:field>						
			<cfg:field name="collectorAffiliation" datatype="tokenizedText" lucenestorage="true" luceneindexed="true">/igsn:resource/igsn:collectors/igsn:collector/igsn:affiliation/igsn:name</cfg:field>	
			<cfg:field name="repository" datatype="string" lucenestorage="true" luceneindexed="true">'CSIRO'</cfg:field>	
						
		</cfg:fields>
		<!-- document boost may only be a XPath query that returns a "number". To generate it, we use a variable defined by a template and cast it here to "number". -->
		<!--cfg:documentBoost>number($boost)</cfg:documentBoost-->
		<cfg:schema>
			<cfg:url>https://raw.githubusercontent.com/IGSN/metadata/dev/description/resource.xsd</cfg:url>
			<cfg:haltOnError>true</cfg:haltOnError>
			<!-- if the validator augments the source document (e.g., adds default attributes), use this as basis for indexing? -->
			<cfg:augmentation>false</cfg:augmentation>
		</cfg:schema>
	</cfg:metadata>
	<!-- global harvester properties are inherited to each index, so only give properties available to all harvester types -->
	<cfg:globalHarvesterProperties>
		<cfg:numConverterThreads>2</cfg:numConverterThreads>
		<cfg:maxConverterQueue>250</cfg:maxConverterQueue>
		<cfg:maxIndexerQueue>250</cfg:maxIndexerQueue>
		<cfg:maxBufferedIndexChanges>1000</cfg:maxBufferedIndexChanges>
	</cfg:globalHarvesterProperties>
	<!--
		When indexing numerical fields, they are saved in a special trie-encoded form to optimize range queries.
		The trie precision step is the precision, how many bits of the numeric values are stored additionally
		for the next higher precision. Indexes with lower precision steps can be queried by
		a config with a multiple of the index-time precision step (e.g. if indexed with 2, 8 for queriying is also possible).
		The default value is 8 and most moderate space usage and speed. Lower values may make queries faster
		but need much more space in index.
	-->
	<cfg:triePrecisionStep>8</cfg:triePrecisionStep>
	<!-- for best performance use "mmap" (only in 64bit Java VMs) or "nio" (but not on Windows) .
	In all other cases use "simple" or "auto" (which chooses simple or nio dependent on system). -->
	<cfg:indexDirImplementation>auto</cfg:indexDirImplementation>
	<!-- the Lucene Analyzer used to tokenize the strings (default field and tokenizedText fields -->
	<cfg:analyzer>
		<cfg:class>org.apache.lucene.analysis.standard.StandardAnalyzer</cfg:class>
		<cfg:importEnglishStopWords/>
		<!--<cfg:addStopWords>and,or,a,...</cfg:addStopWords>-->
	</cfg:analyzer>
	<!-- This setting affects indexing and searching by enabling analyzer features of a specific version (and also bugs).
	If you change this value, you *have* to reindex, as the tokeized terms may not be identical! The allowed values
	can be found in the Version class of Lucene: http://lucene.apache.org/java/3_0_0/api/core/org/apache/lucene/util/Version.html 
	The default is LUCENE_24 for backwards compatibility, for new indexes you should upgrade. Do *not* use LUCENE_CURRENT,
	as you have to reindex on every Lucene update after that! Recommended is LUCENE_30 at the moment. -->
	<cfg:indexVersionCompatibility>LUCENE_24</cfg:indexVersionCompatibility>
	<!-- Definition of Indexes to harvester and their properties -->
	<cfg:indexes>
		<cfg:index id="igsn30-csiro">
			<cfg:displayName>IGSN30-CSIRO</cfg:displayName>
			<cfg:indexDir>./lucene-store/igsn30-csiro</cfg:indexDir>
			<cfg:harvesterClass>de.pangaea.metadataportal.harvester.OAIHarvester</cfg:harvesterClass>
			<cfg:harvesterProperties>
				<cfg:baseUrl>https://igsn.csiro.au/igsn30/api/service/30/oai</cfg:baseUrl>
				<cfg:metadataPrefix>igsn</cfg:metadataPrefix>
				<!--cfg:setSpec>CARBOOCEAN</cfg:setSpec-->
				<cfg:autoOptimize>true</cfg:autoOptimize>
				<cfg:validate>true</cfg:validate>
			</cfg:harvesterProperties>
		</cfg:index>
		<!--
			Here are two possibilities to do a inline transformation of harvested metadata (just as example):
			a) reference to external stylesheet (relative to this config file):
				<cfg:transform src="./ns-convert.xslt"/>
			b) inline stylesheet. Please note, previously declared namespace prefixes are reported to the stylesheet, so you may remove them with "exclude-result-prefixes"!
			For example, this one converts the harvested documents namespace, which may be different or missing in case of old DIFs to the correct new namespace (you may also use xinclude to include it):
				<cfg:transform>
					<xsl:stylesheet version="1.0" xmlns:dif="http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="xsl cfg ib" >
						<xsl:template match="/*">
							<dif:DIF xsi:schemaLocation="http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/ http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/dif_v9.4.xsd">
								<xsl:apply-templates />
							</dif:DIF>
						</xsl:template>
						<xsl:template match="*">
							<xsl:element namespace="http://gcmd.gsfc.nasa.gov/Aboutus/xml/dif/" name="{concat('dif:',local-name())}">
								<xsl:copy-of select="@*" />
								<xsl:apply-templates />
							</xsl:element>
						</xsl:template>
					</xsl:stylesheet>
				</cfg:transform>
			If you want to use one of the internal variables of IndexBuilder (the "$ib:XXXX"-ones),
			declare them as XSL parameters for the stylesheet (possible in both inline and external stylesheets). They are automatically set as
			input parameters to the transformation. Additional declared XSL parameters can simply be passed to the XSL as string attributes of the <cfg:transform/> element.
			-->
		<!--cfg:index id="ifremer">
			<cfg:displayName>IFREMER datasets</cfg:displayName>
			<cfg:indexDir>./lucene-store/ifremer</cfg:indexDir>
			<cfg:harvesterClass>de.pangaea.metadataportal.harvester.OAIHarvester</cfg:harvesterClass>
			<cfg:harvesterProperties>
				<cfg:baseUrl>http://www.ifremer.fr/oai/provider</cfg:baseUrl>
				<cfg:metadataPrefix>dif</cfg:metadataPrefix>
				<cfg:autoOptimize>true</cfg:autoOptimize>
				<cfg:validate>true</cfg:validate>
			</cfg:harvesterProperties>			
		</cfg:index>
		<cfg:index id="copepod">
			<cfg:displayName>COPEPOD</cfg:displayName>
			<cfg:indexDir>./lucene-store/copepod</cfg:indexDir>
			<cfg:harvesterClass>de.pangaea.metadataportal.harvester.WebCrawlingHarvester</cfg:harvesterClass>
			<cfg:harvesterProperties>
				<cfg:baseUrl>http://www.st.nmfs.noaa.gov/plankton/content/xml_src/</cfg:baseUrl>
				<cfg:filenameFilter>.*\.xml</cfg:filenameFilter>
				<cfg:autoOptimize>true</cfg:autoOptimize>
				<cfg:validate>true</cfg:validate>
			</cfg:harvesterProperties>
		</cfg:index>
		<cfg:virtualIndex id="dataportal">
			<cfg:displayName>Test Dataportal</cfg:displayName>
			<cfg:index ref="pangaea-carboocean"/>
			<cfg:index ref="ifremer"/>
			<cfg:index ref="copepod"/>
		</cfg:virtualIndex-->
	</cfg:indexes>
	<!-- Defaults properties for the SearchService -->
	<cfg:search>
		<!-- default SearchService properties -->
		<cfg:cacheMaxAge>300</cfg:cacheMaxAge>
		<cfg:cacheMaxSessions>10</cfg:cacheMaxSessions>
		<cfg:reloadIndexIfChangedAfter>60</cfg:reloadIndexIfChangedAfter>
		<cfg:keepOldReaderAlive>60</cfg:keepOldReaderAlive>
		<cfg:indexChangeCheckInterval>30</cfg:indexChangeCheckInterval>
		<cfg:maxStoredQueries>200</cfg:maxStoredQueries>
		<cfg:queryParserClass>org.apache.lucene.queryParser.QueryParser</cfg:queryParserClass>
		<cfg:defaultQueryParserOperator>and</cfg:defaultQueryParserOperator>
		<!-- some properties for managing the index reader warming -->
		<cfg:warmLifeQueries>20</cfg:warmLifeQueries>
		<!--
		add here some indexed fields used for sorting,
		that should be loaded into FieldCache to speed up initial sorting performance:
		-->
		<!--cfg:warmSortFields>projectFull,dataCenterFull</cfg:warmSortFields-->
		<!-- AXIS special properties -->
		<cfg:returnXML>true</cfg:returnXML>
		<cfg:returnStoredFields>true</cfg:returnStoredFields>
	</cfg:search>
</cfg:config>
